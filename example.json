{
  "course": {
    "current_user": null,
    "course": {
      "id": 226,
      "duration": 2323,
      "title": "Fully Connected Neural Networks with Keras",
      "slug": "fully-connected-neural-networks-with-keras",
      "state": "published",
      "row_order": -7982221,
      "queue_order": 7372717,
      "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
      "is_pro_content": false,
      "free_forever": false,
      "summary": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
      "tagline": null,
      "type": "course",
      "http_url": "https://egghead.io/browse/languages/python",
      "http_short_url": "https://egghead.io/s/2hdgn",
      "path": "/courses/fully-connected-neural-networks-with-keras",
      "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
      "comments_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/comments",
      "published_lesson_count": 19,
      "tags": [
        {
          "name": "python",
          "slug": "python",
          "label": "python",
          "context": "languages",
          "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
          "url": "https://egghead.io/api/v1/tags/python",
          "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "http_url": "https://egghead.io/browse/languages/python"
        }
      ],
      "primary_tag": {
        "name": "python",
        "slug": "python",
        "label": "python",
        "context": "languages",
        "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
        "url": "https://egghead.io/api/v1/tags/python",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
        "http_url": "https://egghead.io/browse/languages/python"
      },
      "library_list": [],
      "language_list": ["python"],
      "framework_list": [],
      "tool_list": [],
      "platform_list": [],
      "skillset_list": [],
      "skill_level_list": [],
      "name": "python",
      "label": "python",
      "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
      "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/square_480/EGH_KerasNeural_Final.png",
      "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/square_280/EGH_KerasNeural_Final.png",
      "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/square_256/EGH_KerasNeural_Final.png",
      "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/square_128/EGH_KerasNeural_Final.png",
      "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/square_64/EGH_KerasNeural_Final.png",
      "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/square_32/EGH_KerasNeural_Final.png",
      "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
      "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
      "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
      "instructor": {
        "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
        "id": 210,
        "slug": "chris-achard",
        "full_name": "Chris Achard",
        "first_name": "Chris",
        "last_name": "Achard",
        "twitter": "nanohopdev",
        "website": "http://www.nanohop.com",
        "bio": "",
        "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
        "google_plus": "",
        "http_url": "https://egghead.io/instructors/chris-achard",
        "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
        "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
        "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
        "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
        "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
        "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
        "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
        "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
        "published_lessons": 28,
        "published_courses": 1
      },
      "enhanced_transcript_count": 19,
      "playlist_index": 0,
      "lessons": [
        {
          "completed": false,
          "id": 3735,
          "creator_id": 265830,
          "slug": "python-course-introduction-fully-connected-neural-networks-with-keras",
          "title": "Course Introduction: Fully Connected Neural Networks with Keras",
          "state": "published",
          "summary": "In this course, we'll build three different neural networks with Keras, using Tensorflow for the backend.  Keras is a high level API for building neural networks, and makes it very easy to get started with only a few lines of code.\n\nYou don't need to know a bunch of math to take this course, and we won't spend a lot of time talking about complicated algorithms - instead, we'll get straight to building networks that you can use today.\n\nBy the end of this course, you will be able to build a neural network, train it on your data, and save the model for later use.  Then, you'll be able to load up your model, and use it to make predictions on new data!",
          "duration": 114,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:03.693-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:00] Neural networks can be a powerful way to make predictions with data. Learning how to build them can be extremely confusing, and many courses use a lot of complicated math to explain what is happening. In this course, we'll make three different types of neural networks using the Keras API with TensorFlow on the backend.\n\n[00:17] Keras is a high level API that lets you get started with neural networks quickly. We don't have to review a lot of math or learn a lot of complex algorithms before we start seeing real results with our networks.\n\n[00:30] We'll start with a neural network designed to predict a single continuous number, which could be used to answer questions like, \"What price will this house sell for?\" or \"How many customers will this restaurant get tonight?\"\n\n[00:40] Then we'll switch to a binary classification network, which can make predictions between two options, or answer yes or no questions.\n\n[00:49] The network can answer questions like, \"Will this customer buy our product?\" or \"Is this cancer or not cancer?\" It can give you a probability score for each answer.\n\n[00:59] Finally, we'll switch to a multiclass classification network, which can be used to distinguish between any number of classes. This is useful to answer questions like, \"What type of flower is this?\" or \"What genre of movie is this?\"\n\n[01:13] Along the way, we'll learn how to train these networks, how to split our data into validation and test sets, how to save the model for later use, and how to use the model to make predictions on new data.\n\n[01:23] We'll also cover a variety of options you have when setting up your networks, like how many layers the network has, and which optimizer and learning rates to choose.\n\n[01:32] I'm excited to present this course because with just a little bit of work, it's possible to make a network that can give you real answers with just a small amount of data. You don't need a million data points to get real results. You don't need an advanced degree in math to get started with neural networks.\n\n[01:47] It's amazing how you can make powerful neural networks in just a few lines of code. I'm excited to show you exactly how to do that.",
          "casting_words_order": "zjUR",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-course-introduction-fully-connected-neural-networks-with-keras",
          "url": "https://egghead.io/api/v1/lessons/python-course-introduction-fully-connected-neural-networks-with-keras",
          "path": "/lessons/python-course-introduction-fully-connected-neural-networks-with-keras",
          "http_url": "https://egghead.io/lessons/python-course-introduction-fully-connected-neural-networks-with-keras",
          "http_short_url": "https://egghead.io/s/bvhhv",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-course-introduction-fully-connected-neural-networks-with-keras/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-course-introduction-fully-connected-neural-networks-with-keras-r1O3s7pX7/scikit-learn-course-introduction-fully-connected-neural-networks-with-keras-r1O3s7pX7.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-course-introduction-fully-connected-neural-networks-with-keras/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-course-introduction-fully-connected-neural-networks-with-keras/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-course-introduction-fully-connected-neural-networks-with-keras/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-course-introduction-fully-connected-neural-networks-with-keras/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": -4650502,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-course-introduction-fully-connected-neural-networks-with-keras-57ee904023/egghead-course-introduction-fully-connected-neural-networks-with-keras-57ee904023.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-course-introduction-fully-connected-neural-networks-with-keras-57ee904023/egghead-course-introduction-fully-connected-neural-networks-with-keras-57ee904023.mpd"
          }
        },
        {
          "completed": false,
          "id": 3707,
          "creator_id": 265830,
          "slug": "python-create-a-fully-connected-tensorflow-neural-network-with-keras",
          "title": "Create a Fully Connected TensorFlow Neural Network with Keras",
          "state": "published",
          "summary": "We will set up Keras using Tensorflow for the back end, and build your first neural network using the Keras Sequential model api, with three Dense (fully connected) layers.  This network will take in 4 numbers as an input, and output a single continuous (linear) output.\n\n## Getting Started\n\n* Install [Python](https://www.python.org/downloads/)\n* Install [Tensorflow](https://www.tensorflow.org/install/)\n* Install [Keras](https://keras.io/#installation)\n* You may also need [h5py](http://docs.h5py.org/en/latest/build.html) if you don't already have it\n* Configure [Keras to use Tensorflow](https://keras.io/backend/)\n",
          "duration": 271,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:03.512-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:00] Start by checking that you have Python installed. Then install TensorFlow and the Keras API. Configure Keras to use TensorFlow as the back-end, then we can make a file to define our neural net. Let's call this one neuralnet.pi.\n\n[00:17] In neuralnet.pi, first import Sequential from keras.models. Sequential is the Keras name for a neural net that has a linear stack of layers between the input and output, which just means there's no loops and no extra input or output nodes.\n\n[00:35] Also, import Dense from keras.layers. A Dense Keras layer is a standard, fully-connected layer. We'll be stacking multiple Dense layers together to make our network. A Dense neural network in Keras is called a model.\n\n[00:48] We'll start by making a new Sequential model. To determine the proper structure of our layers, we first need to know about the shape of our inputs and outputs. For this example, we'll be feeding in a series of four floating point numbers, and we'll be asking the network to predict or calculate the mean of those numbers. We have four numbers as inputs and we expect a single number as the output.\n\n[01:11] Let's start by making our first Dense layer. The first parameter to Dense is the number of hidden nodes in that layer. There are no hard-and-fast rules to creating network layers, so you'll have to try out different things and see what works for your data.\n\n[01:24] In general though, a larger number of hidden nodes will create a more complex network that will solve a greater number of problems. However, the more hidden nodes you add, the longer the network will take to train. Large networks may also be prone to over-fitting.\n\n[01:39] We'll start with a number that is larger than the number of inputs but still small enough to be manageable, which will be eight for this first layer. We will also want to provide a non-linear activation for this layer.\n\n[01:50] There are many activations you can choose from, like Tanh, or sigmoid. We will choose the reLU activation because it can reduce network training time, and it has been shown to be effective in a large number of practical applications.\n\n[02:03] Finally, for this first Dense layer only, we have to specify the input dimensions. Keras can't automatically detect what our input is before it compiles the model.\n\n[02:13] We will tell it that we're going to provide four numbers as our input by setting the input-dim parameter. Now we have our first layer defined, so we can add it to the model.\n\n[02:22] We will just use the add method, which will stack the new layer onto the model. We can copy that line to add our next layer to the network. We don't need to provide the input dimensions here since it's not an input layer. Then we have to pick the number of nodes in this layer.\n\n[02:37] Again, there is no hard-and-fast rules. It's common to have a network which grows in size towards the middle and then shrinks back down towards the output.\n\n[02:44] We'll increase the number of nodes here to 16 and we'll keep the reLU activation. We can copy that to add another layer. This will be our last hidden layer before the output. I'll shrink the hidden nodes back down to eight, and we'll have another relu activation.\n\n[03:01] Finally, we can copy that last layer to define our output layer. We got to pick the number of nodes in the hidden layers to whatever we wanted. The output layer nodes are defined by the size of the output, which we want to be a single number. That means we only need to define a single node in this layer.\n\n[03:18] We don't want the non-linear, relu activation here. Instead we just want a single continuous number as the output. We can tell Keras that by specifying the linear activation, which just means we'll get the raw output here.\n\n[03:31] Now we've defined our entire network, including three hidden layers that will take the four numbers as input and will provide a single number as the output. The last step is to tell Keras that we're done, by telling it to compile the model. We do that by calling the compile method.\n\n[03:47] There are two parameters that we want to specify, which are the Optimizer and Loss. Just like the activation function, there are many Optimiziers to choose from, like SGD, or RMSprop. We'll choose Adam for this network.\n\n[04:00] Adam is an Optimizer that performs quite well on a variety of real-world use cases. It may be important to try other Optimizers to see what best fits your data.\n\n[04:10] Again, for the Loss function there are many to choose from. We're trying to get as close as we can to a particular number as our output, we'll use the common means squared error Loss function. Now in only six lines of code, we've defined our entire network.\n\n[04:24] The ability to define complex networks in such a small amount of code is one of the most powerful features of the Keras API.",
          "casting_words_order": "zjhP",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-create-a-fully-connected-tensorflow-neural-network-with-keras",
          "url": "https://egghead.io/api/v1/lessons/python-create-a-fully-connected-tensorflow-neural-network-with-keras",
          "path": "/lessons/python-create-a-fully-connected-tensorflow-neural-network-with-keras",
          "http_url": "https://egghead.io/lessons/python-create-a-fully-connected-tensorflow-neural-network-with-keras",
          "http_short_url": "https://egghead.io/s/17rmh",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-create-a-fully-connected-tensorflow-neural-network-with-keras/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-create-a-fully-connected-tensorflow-neural-network-with-keras-SkZcg7SXX/scikit-learn-create-a-fully-connected-tensorflow-neural-network-with-keras-SkZcg7SXX.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-create-a-fully-connected-tensorflow-neural-network-with-keras/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-create-a-fully-connected-tensorflow-neural-network-with-keras/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-create-a-fully-connected-tensorflow-neural-network-with-keras/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-create-a-fully-connected-tensorflow-neural-network-with-keras/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": -1183500,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-create-a-fully-connected-tensorflow-neural-network-with-keras-55664656a9/egghead-create-a-fully-connected-tensorflow-neural-network-with-keras-55664656a9.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-create-a-fully-connected-tensorflow-neural-network-with-keras-55664656a9/egghead-create-a-fully-connected-tensorflow-neural-network-with-keras-55664656a9.mpd"
          }
        },
        {
          "completed": false,
          "id": 3708,
          "creator_id": 265830,
          "slug": "python-train-a-sequential-keras-model-with-sample-data",
          "title": "Train a Sequential Keras Model with Sample Data",
          "state": "published",
          "summary": "We’ll set up some training data for a fully connected neural network, and train the model on that data.  Then, we’ll look at how the accuracy decreases as the number of epochs increase.",
          "duration": 154,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:03.736-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:02] Import numpy as np. Then we can define our array of inputs, which we will call Xtrain, and outputs, which we will call Ytrain. They will both be NumPy arrays.\n\n[00:13] The content should be the examples of our inputs and outputs that the network will use to learn its weights and biases. Our model is defined to take four numbers as inputs. We'll define several input examples, which will each be an array containing four numbers.\n\n[00:30] We want the network to learn how to take the mean of the four inputs. That means our output Y values will be the mean of each of the rows from the X inputs. Notice that the Y values are all arrays, even though they each contain only one element.\n\n[00:44] That's because the network expects the inputs and outputs to be arrays, no matter how many elements they contain. We have a set of inputs, and each input has a matching output value, which in this case is the mean of all the inputs.\n\n[00:58] To train the network on our sample data, we'll call the fit method of the model. The only required argument to train the model are the input X values and the output Y values, but there are several optional parameters that we can specify.\n\n[01:12] First, because we only have six input data points, we should pick a batch size that is smaller than that number. We'll define a batch size of 2. Normally, you would have a lot more data, so you could set your batch size to a more common 32, 64, or 256.\n\n[01:28] Next, we'll set the number of epochs to 100. An epoch represents how many times the network will loop through the entire data set. The more epochs you set here, the better the network accuracy will be, but the longer it will take to train.\n\n[01:42] Finally, we'll set verbose to 1, which will allow us to see the loss at every epoch. Then in the command line, we can run our file by typing python neuralnet.py.\n\n[01:54] The neural net has trained. If we scroll to the top of the output, we can see the training start with the first epoch. The loss here is what we're looking to reduce. It starts very high at the beginning because the network is initialized with random weights.\n\n[02:09] It's just totally guessing what the answer should be. With every training step, we want to see the loss go down further and further, until at last we see the loss start to flatten out.\n\n[02:20] If we keep training with more epochs, we should start to see this number go down even further. Already, after only 100, we have a fairly low loss, which represents the mean squared error between the actual Y values and the predicted values from our network.",
          "casting_words_order": "zjhR",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-train-a-sequential-keras-model-with-sample-data",
          "url": "https://egghead.io/api/v1/lessons/python-train-a-sequential-keras-model-with-sample-data",
          "path": "/lessons/python-train-a-sequential-keras-model-with-sample-data",
          "http_url": "https://egghead.io/lessons/python-train-a-sequential-keras-model-with-sample-data",
          "http_short_url": "https://egghead.io/s/yty24",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-train-a-sequential-keras-model-with-sample-data/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-train-a-sequential-keras-model-with-sample-data-B1hXRQBQm/scikit-learn-train-a-sequential-keras-model-with-sample-data-B1hXRQBQm.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-train-a-sequential-keras-model-with-sample-data/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-train-a-sequential-keras-model-with-sample-data/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-train-a-sequential-keras-model-with-sample-data/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-train-a-sequential-keras-model-with-sample-data/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 1853424,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-train-a-sequential-keras-model-with-sample-data-0f0c3d2bc3/egghead-train-a-sequential-keras-model-with-sample-data-0f0c3d2bc3.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-train-a-sequential-keras-model-with-sample-data-0f0c3d2bc3/egghead-train-a-sequential-keras-model-with-sample-data-0f0c3d2bc3.mpd"
          }
        },
        {
          "completed": false,
          "id": 3709,
          "creator_id": 265830,
          "slug": "python-separate-training-and-validation-data-automatically-in-keras-with-validation_split",
          "title": "Separate Training and Validation Data Automatically in Keras with validation_split",
          "state": "published",
          "summary": "When training and testing a neural net, it’s important to separate training data from validation, so that you aren’t checking the accuracy of the model with the same data that you use to train it.  This will help reduce overfitting. We’ll use the `validation_split` parameter when fitting our model to automatically split data up into a training set and a validation set, and use that to check the validation accuracy of our model.",
          "duration": 157,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:02.650-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:01] We've gotten a low loss in only 100 epochs, but that loss number is calculated with the same data that we're using to train the network, which might mean that we're just overfitting to that data. Keras has a built-in way to split data into training and validation data sets.\r\n\r\n[00:16] We'll use it by supplying a validation split parameter to the fit function. Validation split is a decimal between zero and one, which represents the percentage of the training data to use as the validation data set.\r\n\r\n[00:29] For this example, we'll split into 20 percent validation and 80 percent training. Common values are .2 or .33, but you can try different values to see what works best for your data set. There's one very important note when using Keras's automatic validation split, though.\r\n\r\n[00:48] It always takes the last X percent of the data that you give it, so that if you have ordered data of any kind, you may want to shuffle your data before training. We want to make sure to keep the correct Y value with the correct X value, if we shuffle, though.\r\n\r\n[01:03] Let's first make a permutation of numbers that match the size of the output array, which gives us a random array of array indices that we can use to reset the order of our X and Y arrays. When we retrain the network with the validation set, now, there is an extra val loss output value, which represents the mean squared error loss on the validation set.\r\n\r\n[01:30] We want to see low values for the validation loss, and hopefully around the same values as the regular loss. If we rerun this several times, the validation and training losses tend to jump all over the place. This tells us that sometimes, the network is overfitting the data, and sometimes, the network is underfitting the data.\r\n\r\n[01:53] For the specific example, this is because we don't have enough data. We only have six input data points. After we take 20 percent off to be the validation set, we're only left with four. It makes sense that we can't get the network to fit properly all of the time.\r\n\r\n[02:06] The real key thing to look for, though, is that the loss and the validation loss are more consistent as you increase the amount of data that you give the network.\r\n\r\n[02:17] For example, if we doubled the number of inputs and outputs so that we have 12 and rerun the training, we're now training on 9 data points instead of just 4. The loss and validation numbers are lower and more consistent across runs.",
          "casting_words_order": "zjMF",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split",
          "url": "https://egghead.io/api/v1/lessons/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split",
          "path": "/lessons/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split",
          "http_url": "https://egghead.io/lessons/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split",
          "http_short_url": "https://egghead.io/s/1cvgw",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split-ByyFCGCNQ/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split-ByyFCGCNQ.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 4132844,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split-8697ee4d33/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split-8697ee4d33.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split-8697ee4d33/python-separate-training-and-validation-data-automatically-in-keras-with-validation_split-8697ee4d33.mpd"
          }
        },
        {
          "completed": false,
          "id": 3710,
          "creator_id": 265830,
          "slug": "python-manually-set-validation-data-while-training-a-keras-model",
          "title": "Manually Set Validation Data While Training a Keras Model",
          "state": "published",
          "summary": "There are some cases where you don’t want an automatic validation sample - but you want to be able to provide your own validation data set.  For example, with time series data, you may want to use a sequential set of data to do validation.  We’ll manually split our training data into training and validation sets, and then train the model with that split.",
          "duration": 95,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:02.904-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:00] Create a manual validation set by defining two Numpy arrays -- x-val and y-val -- which will hold the inputs in the correct outputs. Validation sets need to match the format of the trained data exactly, which in this case means four numeric inputs and a single numeric output, which is the mean of the four inputs.\n\n[00:24] Instead of using the automatic validation split, we can supply those x- and y-validation sets to the model using the validation data parameter. When we run that, we see the network training on all six input data points and a validation loss being calculated on the three new validation points that we just entered.\n\n[00:47] When manually separating validation data, is important to get a representative sample of the data that you have, otherwise, your validation loss may not be a valid representation of your data.\n\n[00:57] When using the validation split parameter, we achieve that by first shuffling the data. However, every time you train the network, it will shuffle in the data, so it may be difficult to get repeatable results.\n\n[01:12] This is one reason that it may be better to manually set the validation data parameter. Another reason to manually set the validation data is if you have data where it doesn't make sense to pick a random validation set.\n\n[01:24] For example, with some time series data sets, you may want to select a contiguous chunk of time to validate on, instead of just random data points across all of the data.",
          "casting_words_order": "zjMP",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-manually-set-validation-data-while-training-a-keras-model",
          "url": "https://egghead.io/api/v1/lessons/python-manually-set-validation-data-while-training-a-keras-model",
          "path": "/lessons/python-manually-set-validation-data-while-training-a-keras-model",
          "http_url": "https://egghead.io/lessons/python-manually-set-validation-data-while-training-a-keras-model",
          "http_short_url": "https://egghead.io/s/16ywc",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-manually-set-validation-data-while-training-a-keras-model/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-manually-set-validation-data-while-training-a-keras-model-BkXgGqL7Q/scikit-learn-manually-set-validation-data-while-training-a-keras-model-BkXgGqL7Q.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-manually-set-validation-data-while-training-a-keras-model/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-manually-set-validation-data-while-training-a-keras-model/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-manually-set-validation-data-while-training-a-keras-model/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-manually-set-validation-data-while-training-a-keras-model/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 5982188,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-manually-set-validation-data-while-training-a-keras-model-a9c76f1382/egghead-manually-set-validation-data-while-training-a-keras-model-a9c76f1382.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-manually-set-validation-data-while-training-a-keras-model-a9c76f1382/egghead-manually-set-validation-data-while-training-a-keras-model-a9c76f1382.mpd"
          }
        },
        {
          "completed": false,
          "id": 3711,
          "creator_id": 265830,
          "slug": "python-evaluate-a-keras-model-with-test-data",
          "title": "Evaluate a Keras Model with Test Data",
          "state": "published",
          "summary": "Once we have a model with good training and validation accuracy, we will create some test data and evaluate the model’s accuracy on the new data set using the `evaluate` method on the Keras model.",
          "duration": 101,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:03.538-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:01] Make another set of data called X Test and Y Test. This data will be used to test the neural network after training is fully complete. The format should match the train and validation data sets.\n\n[00:13] In this case, there is four input numbers per line in a single output value, which is the correct answer for what we're asking the neural network to predict. For this example case, it's the mean of the four inputs.\n\n[00:27] We can evaluate the loss of our trained network by calling the evaluate method on the model and passing in the x- and the y-values that we just created. The output will be an array of one or more numbers, which represents the metrics that we told our neural network to optimize for.\n\n[00:43] We can print those metric names by calling them Metric Names Method on the model and then print the output to see the actual values. When we run that, we see the hundred epochs like normal with our training loss and validation loss.\n\n[01:01] We also see a single run with the three-new test data points. Finally, we see that our metric is loss. This value represents the loss on the as yet unseen data, which is the test set that we created.\n\n[01:17] In a well-trained and well-tuned, neural network, the training loss, validation loss, and test loss should be similar, which means there is on under or overfitting issues. Also, notice that we've only checked the test set after we fully trained the network.\n\n[01:31] It's a best practice to reserve the test set until the very end of training and validation. Otherwise, it isn't as effective at telling you the actual performance of your network on future unseen data.",
          "casting_words_order": "zjMR",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-evaluate-a-keras-model-with-test-data",
          "url": "https://egghead.io/api/v1/lessons/python-evaluate-a-keras-model-with-test-data",
          "path": "/lessons/python-evaluate-a-keras-model-with-test-data",
          "http_url": "https://egghead.io/lessons/python-evaluate-a-keras-model-with-test-data",
          "http_short_url": "https://egghead.io/s/1hw8y",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-evaluate-a-keras-model-with-test-data/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-evaluate-a-keras-model-with-test-data-H1-aHq8QX/scikit-learn-evaluate-a-keras-model-with-test-data-H1-aHq8QX.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-evaluate-a-keras-model-with-test-data/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-evaluate-a-keras-model-with-test-data/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-evaluate-a-keras-model-with-test-data/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-evaluate-a-keras-model-with-test-data/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 6878187,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-evaluate-a-keras-model-with-test-data-f0c895b5ac/egghead-evaluate-a-keras-model-with-test-data-f0c895b5ac.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-evaluate-a-keras-model-with-test-data-f0c895b5ac/egghead-evaluate-a-keras-model-with-test-data-f0c895b5ac.mpd"
          }
        },
        {
          "completed": false,
          "id": 3712,
          "creator_id": 265830,
          "slug": "python-testing-different-neural-network-topologies",
          "title": "Testing Different Neural Network Topologies",
          "state": "published",
          "summary": "There are numerous ways to set up a neural network, and it can be difficult to figure out what combination of settings and architectures will get the best results.  We’ll investigate a few different typical network topologies including adding more “depth” and “width”, and evaluate what network topology is best for our data set.  For example, you may want a very deep network for increased accuracy on very complex problems, but the training time will take longer.  Or, you may add width to your network to increase accuracy, but this has a risk of overfitting.",
          "duration": 115,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:03.721-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:00] This neural network has three hidden layers and one output layer, so it has a depth of four. There are many other ways we could configure this network.\n\n[00:09] First, we'll run the network as is to check the training and validation losses, so that we can compare those losses to other networks that we can try.\n\n[00:18] To make this network deeper just means to add more hidden layers. Let's copy this layer two more times and increase the middle dense layers number of nodes to 32. Then we can run that network to see what, if any, effect that had on the training and validation loss.\n\n[00:36] We could even make the network deeper if we wanted to. As you make the network deeper, you may also want to run more epochs because the more complex network will now take longer to train properly. When we run that, we can see that the combination of a deep network and a long training time can be very effective.\n\n[01:00] However, remember that we have a small data set which may be skewing our results some. It's important to test on a small data set, but also, to retest as you include more and more of your full data set.\n\n[01:12] Instead of a deep network, we could also try to make a very wide but shallow network which means removing many of the hidden layers, but then drastically increasing the size of one or more of the layers.\n\n[01:22] When we run that, we can see this network is also effective, at least on our small data set. Again, it's important to test different strategies on your data set because every one is different.\n\n[01:36] Once you have all your training and validation, and you have a network that you're happy with, you can go ahead and add back in your test data and evaluation step, in order to test the network on data that it has not yet seen and that you haven't been using to do validation.\n\n[01:50] This will help give you a final, less biased view on how your network is performing.",
          "casting_words_order": "zjde",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-testing-different-neural-network-topologies",
          "url": "https://egghead.io/api/v1/lessons/python-testing-different-neural-network-topologies",
          "path": "/lessons/python-testing-different-neural-network-topologies",
          "http_url": "https://egghead.io/lessons/python-testing-different-neural-network-topologies",
          "http_short_url": "https://egghead.io/s/1axwe",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-testing-different-neural-network-topologies/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-testing-different-neural-network-topologies-HJiX16DXQ/scikit-learn-testing-different-neural-network-topologies-HJiX16DXQ.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-testing-different-neural-network-topologies/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-testing-different-neural-network-topologies/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-testing-different-neural-network-topologies/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-testing-different-neural-network-topologies/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 7774186,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-testing-different-neural-network-topologies-05fc429e02/scikit-learn-testing-different-neural-network-topologies-05fc429e02.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-testing-different-neural-network-topologies-05fc429e02/scikit-learn-testing-different-neural-network-topologies-05fc429e02.mpd"
          }
        },
        {
          "completed": false,
          "id": 3713,
          "creator_id": 265830,
          "slug": "python-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary",
          "title": "Understand the Structure of a Keras Model by Viewing the Model Summary",
          "state": "published",
          "summary": "We will view a summary of the different networks as we create them by using the `summary` method on the model.  This will help us better understand the structure of the model.",
          "duration": 62,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:04.400-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:01] You can print a summary of the neural network with the summary method on the Keras model. When you run that, it will print a nicely-formatted summary that contains all of the network layers and a number that represents the total trainable weights in the network.\n\n[00:19] In general, the more weights a network has, the more complex the function it can approximate, but also, the longer it will take to train and the more data you will need to properly learn that function.\n\n[00:32] We can change the neural network by modifying the number of nodes in a layer, or by modifying the network entirely, to get a better feel for how complex the network is, and how many trainable weights it contains.\n\n[00:52] You can also use this summary method on networks that you didn't define yourself. It can be a helpful way to explore pre-trained networks.",
          "casting_words_order": "zjdc",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary",
          "url": "https://egghead.io/api/v1/lessons/python-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary",
          "path": "/lessons/python-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary",
          "http_url": "https://egghead.io/lessons/python-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary",
          "http_short_url": "https://egghead.io/s/1s6ef",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary-rJxhzpPXm/scikit-learn-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary-rJxhzpPXm.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8203242,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary-0d9373046a/scikit-learn-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary-0d9373046a.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary-0d9373046a/scikit-learn-understand-the-structure-of-a-keras-model-by-viewing-the-model-summary-0d9373046a.mpd"
          }
        },
        {
          "completed": false,
          "id": 3714,
          "creator_id": 265830,
          "slug": "python-make-predictions-on-new-data-with-a-trained-keras-models",
          "title": "Make Predictions on New Data with a Trained Keras Models",
          "state": "published",
          "summary": "Once we choose a network topology and train that network, we will use it to make predictions on new data.  At this point, you can now use your network to make predictions on data in production!",
          "duration": 127,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:03.376-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:01] Keras models that have been trained with the fit method can be used to make predictions using the predict method. The only required parameter to predict is the input values. The shapes of those values need to be NumPy arrays that matches the training input data.\n\n[00:19] For this example, that is an array of four numeric values, make a variable called xPredict which would be a NumPy array just like the training in validation data. Then we can add one or more set of inputs that we want to make predictions for.\n\n[00:38] Let's start with just this one. We can supply that to the predict method and assign that to the output variable. The mean of all four inputs, 1.5, 2, 3.5, and 4, is 2.75. We'll print out that we expect to see 2.75, and we'll print the actual value that the network predicts.\n\n[01:05] The value we get is pretty close. In just 100 EPoX, we were able to train the neural net to get close to calculating the mean of four numbers. At least, that is, for inputs that look similar to our trained inputs. Also, notice that the output is actually an array that contains an array that contains the output value.\n\n[01:24] That's because the predict method can take more than one input data at the same time. Let's add a few more and record the expected mean values. When we run that, we see all three outputs come out at the same time which is the reason the outputs are in an array.\n\n[01:49] Finally, the reason that each individual output is an another array is because we could have defined our neural network with more than one output. If we did, we would get all the outputs here, but we just defined a single output, so we only get one numeric value in each output array",
          "casting_words_order": "zjUT",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-trained-keras-models",
          "url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-trained-keras-models",
          "path": "/lessons/python-make-predictions-on-new-data-with-a-trained-keras-models",
          "http_url": "https://egghead.io/lessons/python-make-predictions-on-new-data-with-a-trained-keras-models",
          "http_short_url": "https://egghead.io/s/1ba8b",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-trained-keras-models/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-make-predictions-on-new-data-with-a-trained-keras-models-SJHMw6wmm/scikit-learn-make-predictions-on-new-data-with-a-trained-keras-models-SJHMw6wmm.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-trained-keras-models/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-trained-keras-models/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-trained-keras-models/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-trained-keras-models/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8284651,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-make-predictions-on-new-data-with-a-trained-keras-models-93e22564dc/egghead-make-predictions-on-new-data-with-a-trained-keras-models-93e22564dc.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-make-predictions-on-new-data-with-a-trained-keras-models-93e22564dc/egghead-make-predictions-on-new-data-with-a-trained-keras-models-93e22564dc.mpd"
          }
        },
        {
          "completed": false,
          "id": 3715,
          "creator_id": 265830,
          "slug": "python-save-a-trained-keras-model-weights-and-topology-to-a-file",
          "title": "Save a Trained Keras Model Weights and Topology to a File",
          "state": "published",
          "summary": "Instead of training the network every single time it is run, we’ll want to save the Keras model so that we can use it in the future.  Keras makes it easy to save both the model weights and topology to a single file, so we’ll do that here.",
          "duration": 64,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:48.370-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:00] Every time we run this file, it defines the network and retrains the entire network before it can make a prediction. This is definitely not optimal since training will always take longer than predicting.\n\n[00:17] Instead of predicting here, we can save the entire model definition with the trained weights by using the model's save method. The model save only takes one argument, which is the path to the file that you want to save.\n\n[00:31] We'll save our file as meannetwork.h5. We use the h5 file extension because Keras uses the h5py library to make a binary file, but you can name this file whatever you'd like, like .model or .network.\n\n[00:48] When we run that now, we have a saved model file. It's a binary file that we can't read in a text editor, but it contains all the model information that we need to make predictions with the model, without requiring training again.",
          "casting_words_order": "zjMH",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-save-a-trained-keras-model-weights-and-topology-to-a-file",
          "url": "https://egghead.io/api/v1/lessons/python-save-a-trained-keras-model-weights-and-topology-to-a-file",
          "path": "/lessons/python-save-a-trained-keras-model-weights-and-topology-to-a-file",
          "http_url": "https://egghead.io/lessons/python-save-a-trained-keras-model-weights-and-topology-to-a-file",
          "http_short_url": "https://egghead.io/s/1t9qe",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-save-a-trained-keras-model-weights-and-topology-to-a-file/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/python-save-a-trained-keras-model-weights-and-topology-to-a-file-S1mnAGAN7/python-save-a-trained-keras-model-weights-and-topology-to-a-file-S1mnAGAN7.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-save-a-trained-keras-model-weights-and-topology-to-a-file/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-save-a-trained-keras-model-weights-and-topology-to-a-file/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-save-a-trained-keras-model-weights-and-topology-to-a-file/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-save-a-trained-keras-model-weights-and-topology-to-a-file/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8364013,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/python-save-a-trained-keras-model-weights-and-topology-to-a-file-425fd8ce34/python-save-a-trained-keras-model-weights-and-topology-to-a-file-425fd8ce34.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/python-save-a-trained-keras-model-weights-and-topology-to-a-file-425fd8ce34/python-save-a-trained-keras-model-weights-and-topology-to-a-file-425fd8ce34.mpd"
          }
        },
        {
          "completed": false,
          "id": 3716,
          "creator_id": 265830,
          "slug": "python-load-and-use-a-saved-keras-model",
          "title": "Load and Use a Saved Keras Model",
          "state": "published",
          "summary": "We will load a saved model from a file, and then use it to make predictions on new data.  We won’t need to know anything about the model to do this - we can do it all in a new file by loading a saved model.",
          "duration": 67,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:04.028-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:01] In a new Python file, import load model from keras.models. Then we can call the load model function, passing the file name of the model file that we saved. The result of that will be the entire trained model, so we can assign that to the model variable.\n\n[00:23] We can see the model details by calling model.summary. When we run that, we see all of the layers in the network and their sizes. This allows us to load and even inspect models that we didn't make ourselves. Then we can use this model to make predictions since it's a fully-trained model.\n\n[00:43] First, import NumPy, and then make a few input arrays to make predictions on. Then use the model's predict method to actually make those predictions. When we run that, we see the model's output predictions.",
          "casting_words_order": "zjUV",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-load-and-use-a-saved-keras-model",
          "url": "https://egghead.io/api/v1/lessons/python-load-and-use-a-saved-keras-model",
          "path": "/lessons/python-load-and-use-a-saved-keras-model",
          "http_url": "https://egghead.io/lessons/python-load-and-use-a-saved-keras-model",
          "http_short_url": "https://egghead.io/s/21n21",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-load-and-use-a-saved-keras-model/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-load-and-use-a-saved-keras-model-HyBPLRvQ7/scikit-learn-load-and-use-a-saved-keras-model-HyBPLRvQ7.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-load-and-use-a-saved-keras-model/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-load-and-use-a-saved-keras-model/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-load-and-use-a-saved-keras-model/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-load-and-use-a-saved-keras-model/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8375279,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-load-and-use-a-saved-keras-model-13f02d047b/scikit-learn-load-and-use-a-saved-keras-model-13f02d047b.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-load-and-use-a-saved-keras-model-13f02d047b/scikit-learn-load-and-use-a-saved-keras-model-13f02d047b.mpd"
          }
        },
        {
          "completed": false,
          "id": 3719,
          "creator_id": 265830,
          "slug": "python-create-a-neural-network-for-two-category-classification-with-keras",
          "title": "Create a Neural Network for Two Category Classification with Keras",
          "state": "published",
          "summary": "We’ll take a Keras network designed for continuous (linear) output, and convert it into a network for binary classification, which can divide data into two classes (for example: “dog” vs “cat”), and can be used for things like sentiment analysis (\"positive\" vs \"negative\").",
          "duration": 162,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:03.713-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:00] We have a neural network defined, which takes in four numbers and returns a numerical value that represents the mean of those four numbers. Instead, what if we wanted to classify our data with the network?\r\n\r\n[00:11] For example, we'll call the numbers less than 50 low, and the numbers greater than 50 will be high. In this example, the numbers are less than 50, so the class of this set of numbers is low. The main structure of the network can remain exactly the same. We're taking in four numbers, and the layers are still fine. It's only the output that is different.\r\n\r\n[00:36] We have a linear activation function on the output, but that will give us values like 12 or -1.5. Instead, we want to pick a class, low or high. First, let's assign the number zero to the class low, and the number one to the class high.\r\n\r\n[00:51] Then, instead of a linear activation, we should use sigmoid, which is a function that will return a single number between zero and one. The closer it is to zero, the more likely the input is to be low. The closer it is to one, the more likely the input is to be high.\r\n\r\n[01:06] There are some changes to make in the compile step as well. First, change the loss from mean squared error to binary cross entropy, which is a loss function that will optimize the data for being a part of one of two classes.\r\n\r\n[01:21] Then we want to make a new metric to our model and call it accuracy, which can tell us the percentage of our training, validation, or test data points that were correctly identified. Now, we can train our X train and Y train Numpy arrays, and fill in several examples.\r\n\r\n[01:43] Now, the Y train variable, instead of the mean of the four numbers, we'll use the value zero for low and one for high. The first three inputs are zero, and the next three are one. We can also define a validation set in the same way, and then train the model with the fit method, using the same parameters that we would if we were only using a linear output.\r\n\r\n[02:11] When we run that, we see 100 epochs of training, where we still see the loss value, but we also see accuracy for both training and validation. In just 100 epochs, we can get 100 percent accuracy on our small data set.\r\n\r\n[02:30] This is admittedly a small data set, and a very contrived example, but it shows the potential power of a fully connected neural network for problems like two-class classification or sentiment analysis.",
          "casting_words_order": "zjMJ",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-create-a-neural-network-for-two-category-classification-with-keras",
          "url": "https://egghead.io/api/v1/lessons/python-create-a-neural-network-for-two-category-classification-with-keras",
          "path": "/lessons/python-create-a-neural-network-for-two-category-classification-with-keras",
          "http_url": "https://egghead.io/lessons/python-create-a-neural-network-for-two-category-classification-with-keras",
          "http_short_url": "https://egghead.io/s/p0wm2",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-create-a-neural-network-for-two-category-classification-with-keras/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-create-a-neural-network-for-two-category-classification-with-keras-H18zc6Om7/scikit-learn-create-a-neural-network-for-two-category-classification-with-keras-H18zc6Om7.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-create-a-neural-network-for-two-category-classification-with-keras/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-create-a-neural-network-for-two-category-classification-with-keras/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-create-a-neural-network-for-two-category-classification-with-keras/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-create-a-neural-network-for-two-category-classification-with-keras/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8386545,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-create-a-neural-network-for-two-category-classification-with-keras-e46ab96c45/egghead-create-a-neural-network-for-two-category-classification-with-keras-e46ab96c45.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-create-a-neural-network-for-two-category-classification-with-keras-e46ab96c45/egghead-create-a-neural-network-for-two-category-classification-with-keras-e46ab96c45.mpd"
          }
        },
        {
          "completed": false,
          "id": 3720,
          "creator_id": 265830,
          "slug": "python-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method",
          "title": "Import Data From a CSV to Use with a Keras Model Using NumPy’s genfromtxt Method",
          "state": "published",
          "summary": "We’ll replace our set of sample data with data that we import from a CSV, by importing it as a numpy array using numpy's genfromtxt method.  Then we’ll use that data to train the binary classification model.",
          "duration": 120,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:03.554-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:01] We have a CSV that contains a hundred rows of inputs that we want to use to train our neural network. Each row has four numbers and a single output value of a zero or one. Zero represent the numbers are generally low which for us means less than 50, and one means the values are generally high which means over 50.\n\n[00:26] After defining a neural network, import the CSV using NumPy's genfromtxt method. Genfromtxt takes the CSV to import as the first argument and an optional delimiter argument which is just a comma in this case. Then we can assign the output of that to data variable, which is now a NumPy array that contains all of the rows and columns that were in the CSV.\n\n[00:54] We can split the data into the input values by taking all the rows except for the first, because that's the header row, and the first four column which are inputs. Then, we can extract the output class values by taking all the rows except for the header again, and only the fourth column this time which is the output value.\n\n[01:19] If we print the X values at this point, we have a NumPy array with a hundred rows and four columns in each row. If we print the Y values, we have a NumPy array with a hundred values which are all the output classes. We can then use the X_train and Y_train values to fit the model, passing them into the X and Y arguments, specifying 100 epox and a validations split of 20 percent.\n\n[01:51] When we run that, the network successfully trained on the init data.",
          "casting_words_order": "zjUX",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method",
          "url": "https://egghead.io/api/v1/lessons/python-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method",
          "path": "/lessons/python-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method",
          "http_url": "https://egghead.io/lessons/python-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method",
          "http_short_url": "https://egghead.io/s/1z3g7",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method-BJVcseYmX/scikit-learn-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method-BJVcseYmX.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8388595,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method-5f33372c57/scikit-learn-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method-5f33372c57.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method-5f33372c57/scikit-learn-import-data-from-a-csv-to-use-with-a-keras-model-using-numpy-s-genfromtxt-method-5f33372c57.mpd"
          }
        },
        {
          "completed": false,
          "id": 3721,
          "creator_id": 265830,
          "slug": "python-make-binary-class-predictions-with-keras-using-predict-and-predict_classes",
          "title": "Make Binary Class Predictions with Keras Using predict and predict_classes",
          "state": "published",
          "summary": "We will use the Keras model’s `predict` method to look at the predicted class value.  Then we will use the `predict_classes` method to have Keras make a class prediction for us, and return only a 0 or a 1, which represents the predicted class.",
          "duration": 65,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:03.678-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:01] Our neural network takes in four numerical values and predicts a class of zero, if the values are low, and one, if the values are high. After the neural network is trained, make some inputs to test that are NumPy arrays of four values each. Then, we will call the models predict method to make predictions on those inputs and print the output to the screen.\n\n[00:28] When we run that, we see that the network returns a floating point value and not a class of zero or one like you might expect. What you are seeing is the raw output from the sigmoid function that we defined on the output node and not the classes as we define them.\n\n[00:48] We could round these predicted values to get to a class, or we'd have Keras do that for us by calling the predict classes method instead of just predict. Once we change to that, we see the proper classes for our input data.",
          "casting_words_order": "zjUZ",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-make-binary-class-predictions-with-keras-using-predict-and-predict_classes",
          "url": "https://egghead.io/api/v1/lessons/python-make-binary-class-predictions-with-keras-using-predict-and-predict_classes",
          "path": "/lessons/python-make-binary-class-predictions-with-keras-using-predict-and-predict_classes",
          "http_url": "https://egghead.io/lessons/python-make-binary-class-predictions-with-keras-using-predict-and-predict_classes",
          "http_short_url": "https://egghead.io/s/19nj1",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-make-binary-class-predictions-with-keras-using-predict-and-predict_classes/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-make-binary-class-predictions-with-keras-using-predict-and-predict_classes-r17-AeYXX/scikit-learn-make-binary-class-predictions-with-keras-using-predict-and-predict_classes-r17-AeYXX.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-make-binary-class-predictions-with-keras-using-predict-and-predict_classes/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-make-binary-class-predictions-with-keras-using-predict-and-predict_classes/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-make-binary-class-predictions-with-keras-using-predict-and-predict_classes/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-make-binary-class-predictions-with-keras-using-predict-and-predict_classes/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8388597,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-make-binary-class-predictions-with-keras-using-predict-and-predict_classes-10634ec44b/scikit-learn-make-binary-class-predictions-with-keras-using-predict-and-predict_classes-10634ec44b.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-make-binary-class-predictions-with-keras-using-predict-and-predict_classes-10634ec44b/scikit-learn-make-binary-class-predictions-with-keras-using-predict-and-predict_classes-10634ec44b.mpd"
          }
        },
        {
          "completed": false,
          "id": 3722,
          "creator_id": 265830,
          "slug": "python-create-a-dense-neural-network-for-multi-category-classification-with-keras",
          "title": "Create a Dense Neural Network for Multi Category Classification with Keras",
          "state": "published",
          "summary": "We’ll take a network set up for binary classification, and turn it into a network that can take 3 or more classes.  This network will let us go beyond classifying data into only two categories, and will allow us to expand to any number of categories (for example: “dog” vs “cat” vs “mouse”).  Then, we’ll use real data from a csv to train and test that network.",
          "duration": 220,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:03.459-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:01] We're training the neural networks on a CSV with two classes, zero for low and one for high. Now, we're going to switch that to a new dataset. This is the Iris dataset, which is a common training set used to test neural networks. Each row represents a different flower and each flower has four data points, the Sepal Length, Sepal Width, Petal Length, and Petal Width.\n\n[00:26] The final column is the class of the flower, which is a zero, a one, or two. A zero represents Iris setosa, a one is Iris versicolor, and two is Iris virginica. We can import the iris.csv file. We have three classes, but before we just had two. Now, we have to convert the network from a binary classification network to a multi-class classification network.\n\n[01:00] First, we can't use binary cross entropy anymore, because that's only for two-class problems. We'll update that to categorical cross entropy, which can use any number of classes. Categorical cross entropy, however, can't take up the flower classes as just a number like zero, one, or two, but instead, it needs to have the class represented by a one-hot encoded vector.\n\n[01:25] Keras has a built-in function to do that translation for us. Import to_categorical from keras.utils.np_utils. If we check the Y values we have now, we have an array filled with zero's, one's, and two's. We can call to_categorical and pass in our Y values.\n\n[01:48] Now, we have an array of one-hot encoded vectors, which means the index zero value is a one, if the class was a zero, the index one value is a one, if the class was a one, and the index two value is a one, if the class was a two.\n\n[02:07] Since we are using validation split in the model fit and we have auto-data, we also want to make sure to shuffle the data before we do a fit, whereas the validation set would only select from the end of the file, which would only ever include the flowers of class two.\n\n[02:25] We have the data in the correct format for the fit network call now. Our network output has to change from a single zero or one value to a one-hot encoded vector of length three. First, we have to change the size of the output from one to three, which means, we want to reconsider our sigmoid activation function.\n\n[02:48] We can think of the three outputs as the probability that the inputs are each one of the classes. In this example output, there is a 10 percent chance that the flower is Iris setosa, a 20 percent chance that the flower is Iris versicolor, and a 70 percent chance the flower is Iris virginica.\n\n[03:07] By using a sigmoid, means we can range from zero to one for all of the probabilities. What if we get an output where all the probabilities are 09. To avoid this type of case, we'll use an activation function called Softmax, which will ensure that all three probabilities add to one, which will help our neural network decide which class it might belong to then we can run our model.\n\n[03:34] In only one hundred epox, we're getting fairly good results with our new multi-class model.",
          "casting_words_order": "zjU8",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-create-a-dense-neural-network-for-multi-category-classification-with-keras",
          "url": "https://egghead.io/api/v1/lessons/python-create-a-dense-neural-network-for-multi-category-classification-with-keras",
          "path": "/lessons/python-create-a-dense-neural-network-for-multi-category-classification-with-keras",
          "http_url": "https://egghead.io/lessons/python-create-a-dense-neural-network-for-multi-category-classification-with-keras",
          "http_short_url": "https://egghead.io/s/19k0s",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-create-a-dense-neural-network-for-multi-category-classification-with-keras/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-create-a-dense-neural-network-for-multi-category-classification-with-keras-SyJoJzFm7/scikit-learn-create-a-dense-neural-network-for-multi-category-classification-with-keras-SyJoJzFm7.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-create-a-dense-neural-network-for-multi-category-classification-with-keras/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-create-a-dense-neural-network-for-multi-category-classification-with-keras/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-create-a-dense-neural-network-for-multi-category-classification-with-keras/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-create-a-dense-neural-network-for-multi-category-classification-with-keras/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8388599,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-create-a-dense-neural-network-for-multi-category-classification-with-keras-cc222b1d92/egghead-create-a-dense-neural-network-for-multi-category-classification-with-keras-cc222b1d92.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/egghead-create-a-dense-neural-network-for-multi-category-classification-with-keras-cc222b1d92/egghead-create-a-dense-neural-network-for-multi-category-classification-with-keras-cc222b1d92.mpd"
          }
        },
        {
          "completed": false,
          "id": 3776,
          "creator_id": 265830,
          "slug": "python-make-predictions-on-new-data-with-a-multi-category-classification-network",
          "title": "Make Predictions on New Data with a Multi Category Classification Network",
          "state": "published",
          "summary": "Once we have built a multi-class classification network, we'll use it to make predictions on new data that wasn't used during training.  We'll start by calling the `predict` method, which returns the probability that each input data row belongs to each one of the possible classes.  Then, we'll use the `predict_classes` method to only output the class prediction as an integer, which might be easier to use in a production system.",
          "duration": 169,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:49.033-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:00] We've defined our model for multiclass classification, and then fit it on data that we've pulled in from a CSV. After we fit our network, we would like to use that model to make predictions on new data.\r\n\r\n[00:16] Let's make some new data by making a Numpy array with three new data rows. This is new data that the model hasn't seen yet. I've picked one new data row for each class of data that we have. The first row is class zero, which is Iris setosa.\r\n\r\n[00:32] The second row should be class one, which is Iris versicolor. The third row is an example of class two, which is Iris virginica. Now, we can make a class prediction for each row by calling the predict method on the model, and pass in the data that we want to make predictions on.\r\n\r\n[00:51] Then we can print the output with a blank line, just for formatting. When we rerun that, the model trains like normal. Then we see predictions each for the three rows that we just created. You might notice that the values are all scientific notation, and that can be difficult to read.\r\n\r\n[01:10] Let's clean that up by telling Numpy to suppress scientific notation, by calling set_printoptions on Numpy, and set suppress equal to true. Then we can run that again, and now, the output is easier to read.\r\n\r\n[01:26] To interpret this output, remember that the input was made into categorical data by calling to_categorical with the data, which turns it from an integer like zero, one, or two into a one hot encoded value.\r\n\r\n[01:40] What we're seeing on the output is the probability that each of the inputs belongs to each one of the classes. It's also one hot encoded. Each row is the row of our input data, and each column represents one of the possible classes.\r\n\r\n[01:55] If you were to round these values, you can see that the first value would have a one in the index zero spot, and a zero in the two other spots, which means the prediction for this row is class zero, or Iris setosa.\r\n\r\n[02:08] For the second row, the highest value is in the index one spot, and for the last row, the highest value is in the index two spot, which means our network is correctly predicting those as well. This can be confusing to read and deal with, however.\r\n\r\n[02:23] If you don't care about the probability for each of the output classes, you can just see the class predictions by calling the predict_classes method, instead of just the predict method.\r\n\r\n[02:32] If we add a line to call predict_classes, and rerun that, we can see that the output is just the class numbers that are being predicted, which match up with the one hot encoded output that we saw before, but it may be easier to interpret and use.",
          "casting_words_order": "zjML",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-multi-category-classification-network",
          "url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-multi-category-classification-network",
          "path": "/lessons/python-make-predictions-on-new-data-with-a-multi-category-classification-network",
          "http_url": "https://egghead.io/lessons/python-make-predictions-on-new-data-with-a-multi-category-classification-network",
          "http_short_url": "https://egghead.io/s/29naf",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-multi-category-classification-network/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-make-predictions-on-new-data-with-a-multi-category-classification-network-HkcGIVA4Q/scikit-learn-make-predictions-on-new-data-with-a-multi-category-classification-network-HkcGIVA4Q.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-multi-category-classification-network/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-multi-category-classification-network/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-multi-category-classification-network/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-make-predictions-on-new-data-with-a-multi-category-classification-network/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8388600,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-make-predictions-on-new-data-with-a-multi-category-classification-network-f2ddc39daa/scikit-learn-make-predictions-on-new-data-with-a-multi-category-classification-network-f2ddc39daa.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-make-predictions-on-new-data-with-a-multi-category-classification-network-f2ddc39daa/scikit-learn-make-predictions-on-new-data-with-a-multi-category-classification-network-f2ddc39daa.mpd"
          }
        },
        {
          "completed": false,
          "id": 3723,
          "creator_id": 265830,
          "slug": "python-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network",
          "title": "Change the Learning Rate of the Adam Optimizer on a Keras Network",
          "state": "published",
          "summary": "We can specify several options on a network optimizer, like the learning rate and decay, so we’ll investigate what effect those have on training time and accuracy.  Each data sets may respond differently, so it’s important to try different optimizer settings to find one that properly trades off training time vs accuracy for your data.",
          "duration": 92,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:04.384-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:00] We're using the Adam optimizer for the network which has a default learning rate of .001. To change that, first import Adam from keras.optimizers. Then, instead of just saying we're going to use the Adam optimizer, we can create a new instance of the Adam optimizer, and use that instead of a string to set the optimizer.\n\n[00:27] One of the optional parameters is lr, which stands for learning rate. Setting the learning rate is like saying how large the steps are that the network takes while learning. If the learning rate is too small, the network will never have a chance to get where it's going. The accuracy will always be low, or training will take a really long time.\n\n[00:57] If the learning rate is too large, then the network will jump all over the place and will never be able to find the best solution, because it will keep jumping over it. Let's set a learning rate of .005 and see how that works for our problem set.\n\n[01:15] After 100 EPoX, we're seeing good progress on the training in validation accuracy, so we'll keep that learning rate. It's important to test different learning rates for your network, because each dataset in network topology will respond slightly differently to different learning rates.",
          "casting_words_order": "zjU6",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network",
          "url": "https://egghead.io/api/v1/lessons/python-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network",
          "path": "/lessons/python-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network",
          "http_url": "https://egghead.io/lessons/python-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network",
          "http_short_url": "https://egghead.io/s/252xw",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network-ryzTfGF7Q/scikit-learn-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network-ryzTfGF7Q.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8388603,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network-bb35416425/scikit-learn-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network-bb35416425.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network-bb35416425/scikit-learn-change-the-learning-rate-of-the-adam-optimizer-on-a-keras-network-bb35416425.mpd"
          }
        },
        {
          "completed": false,
          "id": 3724,
          "creator_id": 265830,
          "slug": "python-change-the-optimizer-learning-rate-during-keras-model-training",
          "title": "Change the Optimizer Learning Rate During Keras Model Training",
          "state": "published",
          "summary": "We’ll break our training up into multiple steps, and use different learning rates at each step.  This will allow the model to train more quickly at the beginning by taking larger steps, but we will reduce the learning rate in later steps, in order to more finely tune the model as it approaches an optimal solution.  If we just used a high learning rate during the entire training process, then the network may never converge on a good solution, and if we use a low learning rate for the entire process, then the network would take far too long to train.  Varying the learning rate gives us the best of both worlds (high accuracy, with a fast training time).",
          "duration": 77,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:04.579-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:00] We're setting the learning rate for the Adam optimizer before we fit, but we may want to change that later and retrain with a lower learning rate.\n\n[00:09] After we fit the first time, we can change the model optimizer by setting model.optimizer to a new Adam optimizer with a lower learning rate. Then we can call fit again with the same parameters as before.\n\n[00:22] It's perfectly OK to call fit more than once on your model. It will remember the weights from before and continue to train and improve on them during the second fit step.\n\n[00:30] What we're doing by first writing with a high learning rate and then switching to a small learning rate is telling the network that it can start by taking large steps, which gives it more freedom to explore the training landscape.\n\n[00:44] Then when we want to start refining the results, without risking taking a big step in the wrong direction, we lower the learning rate and continue training.\n\n[00:54] Now when we run that it starts with a hundred epochs at the first learning rate and then continues with another hundred epochs at the smaller learning rate.\n\n[01:05] Now that we're happy with that model, let's save it, so that we can reload the fully-trained model later.",
          "casting_words_order": "zjU4",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-change-the-optimizer-learning-rate-during-keras-model-training",
          "url": "https://egghead.io/api/v1/lessons/python-change-the-optimizer-learning-rate-during-keras-model-training",
          "path": "/lessons/python-change-the-optimizer-learning-rate-during-keras-model-training",
          "http_url": "https://egghead.io/lessons/python-change-the-optimizer-learning-rate-during-keras-model-training",
          "http_short_url": "https://egghead.io/s/2mx17",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-change-the-optimizer-learning-rate-during-keras-model-training/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-change-the-optimizer-learning-rate-during-keras-model-training-ByuuHzY7Q/scikit-learn-change-the-optimizer-learning-rate-during-keras-model-training-ByuuHzY7Q.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-change-the-optimizer-learning-rate-during-keras-model-training/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-change-the-optimizer-learning-rate-during-keras-model-training/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-change-the-optimizer-learning-rate-during-keras-model-training/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-change-the-optimizer-learning-rate-during-keras-model-training/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8388604,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-change-the-optimizer-learning-rate-during-keras-model-training-d38183deeb/scikit-learn-change-the-optimizer-learning-rate-during-keras-model-training-d38183deeb.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-change-the-optimizer-learning-rate-during-keras-model-training-d38183deeb/scikit-learn-change-the-optimizer-learning-rate-during-keras-model-training-d38183deeb.mpd"
          }
        },
        {
          "completed": false,
          "id": 3725,
          "creator_id": 265830,
          "slug": "python-continue-to-train-an-already-trained-keras-model-with-new-data",
          "title": "Continue to Train an Already Trained Keras Model with New Data",
          "state": "published",
          "summary": "As we get new data, we will want to re-train our old models with that new data.  We’ll look at how to load the existing model, and train it with new data, and then save the newly trained model.",
          "duration": 91,
          "plays_count": 0,
          "published_at": "2018-10-25T19:44:04.354-05:00",
          "is_pro_content": false,
          "difficulty_rating": 0,
          "series_row_order_position": null,
          "free_forever": false,
          "transcript": "Instructor: [00:01] We can load an existing model by importing Load Model from Keras.Models, and then call Load Model and pass the file name of our saved model. We can look at the summary of that model to better understand what we just loaded.\n\n[00:18] We can also continue training the saved model if we want to. We don't have the model defined in this file at all, but the saved file contains all the information that we need to pick up training right where we left off. We can import Numpy and use that to load the IRIS CSV file.\n\n[00:41] We need to remember to switch the y-values from just a number to a one-hot encoded vector. First, import two-categorical and then we can use that on the y-values.\n\n[01:01] We need to make sure to shuffle the data again since we're going to be using the validation split method. Finally, we can call fit just like normal.\n\n[01:15] The model will pick up just where it left off and continue to train the network. This can be especially helpful if you get new data and you want to train an old model, or if you simply want to pause training because it's taking a long time and resume at a later time.",
          "casting_words_order": "zjMN",
          "type": "lesson",
          "lesson_url": "https://egghead.io/api/v1/lessons/python-continue-to-train-an-already-trained-keras-model-with-new-data",
          "url": "https://egghead.io/api/v1/lessons/python-continue-to-train-an-already-trained-keras-model-with-new-data",
          "path": "/lessons/python-continue-to-train-an-already-trained-keras-model-with-new-data",
          "http_url": "https://egghead.io/lessons/python-continue-to-train-an-already-trained-keras-model-with-new-data",
          "http_short_url": "https://egghead.io/s/27bj6",
          "next_up_url": "https://egghead.io/api/v1/lessons/python-continue-to-train-an-already-trained-keras-model-with-new-data/next_up",
          "tag_list": ["free"],
          "library_list": [],
          "language_list": ["python"],
          "framework_list": [],
          "tool_list": [],
          "platform_list": [],
          "skillset_list": [],
          "skill_level_list": [],
          "image_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_480/2000px-Python-logo-notext.svg.png",
          "image_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_280/2000px-Python-logo-notext.svg.png",
          "image_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_256/2000px-Python-logo-notext.svg.png",
          "image_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_128/2000px-Python-logo-notext.svg.png",
          "image_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_64/2000px-Python-logo-notext.svg.png",
          "image_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/square_32/2000px-Python-logo-notext.svg.png",
          "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
          "thumb_nail": "https://dcv19h61vib2d.cloudfront.net/thumbs/scikit-learn-continue-to-train-an-already-trained-keras-model-with-new-data-r1Io5GtmQ/scikit-learn-continue-to-train-an-already-trained-keras-model-with-new-data-r1Io5GtmQ.jpg",
          "landscape_icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/landscape/2000px-Python-logo-notext.svg.png",
          "transcript_url": "https://egghead.io/api/v1/lessons/python-continue-to-train-an-already-trained-keras-model-with-new-data/transcript",
          "subtitles_url": "https://egghead.io/api/v1/lessons/python-continue-to-train-an-already-trained-keras-model-with-new-data/subtitles",
          "related_url": "https://egghead.io/api/v1/lessons/python-continue-to-train-an-already-trained-keras-model-with-new-data/related",
          "comments_url": "https://egghead.io/api/v1/lessons/python-continue-to-train-an-already-trained-keras-model-with-new-data/comments",
          "lesson_errata": [],
          "is_pro": false,
          "technology": {
            "name": "python",
            "label": "python",
            "http_url": "https://egghead.io/browse/languages/python",
            "logo_http_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png"
          },
          "primary_tag": {
            "name": "python",
            "slug": "python",
            "label": "python",
            "context": "languages",
            "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
            "url": "https://egghead.io/api/v1/tags/python",
            "http_url": "https://egghead.io/browse/languages/python"
          },
          "tags": [
            {
              "name": "python",
              "slug": "python",
              "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/138/thumb/2000px-Python-logo-notext.svg.png",
              "label": "python",
              "context": "languages",
              "description": "Python is a widely used dynamically typed programming language. It allows for many different programming paradigms including object-oriented, imperative, functional programming, and procedural styles.",
              "url": "https://egghead.io/api/v1/tags/python",
              "http_url": "https://egghead.io/browse/languages/python"
            }
          ],
          "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
          "instructor": {
            "id": 210,
            "slug": "chris-achard",
            "full_name": "Chris Achard",
            "first_name": "Chris",
            "last_name": "Achard",
            "twitter": "nanohopdev",
            "website": "http://www.nanohop.com",
            "bio": "",
            "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
            "google_plus": "",
            "http_url": "https://egghead.io/instructors/chris-achard",
            "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
            "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_480/chris_500.jpg",
            "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_280/chris_500.jpg",
            "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_256/chris_500.jpg",
            "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_128/chris_500.jpg",
            "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_64/chris_500.jpg",
            "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/square_32/chris_500.jpg",
            "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
            "published_lessons": 28,
            "published_courses": 1
          },
          "series_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
          "series_row_order": 8388607,
          "series": {
            "title": "Fully Connected Neural Networks with Keras",
            "description": "Neural networks, with Keras, bring powerful machine learning to Python applications. They can answer questions like “How much traffic will hit my website tonight?” or answer classification questions like “Will this customer buy our product?” or “Will the stock price go up or down tomorrow?”\n\nIn this course, we’ll build a fully connected neural network with Keras. This is the most basic type of neural network you can create, but it’s powerful in application and can jumpstart your exploration of other frameworks. \n\nWe’ll start the course by creating the primary network. Then we’ll:\n\n- build and configure the network, then evaluate and test the accuracy of each\n- save the model and learn how to load it and use it to make predictions in the future\n- expose the model as part of a tiny web application that can be used to make predictions\n\nYou don’t need to know a lot of Python for this course, but some basic Python knowledge will be helpful. Enjoy!",
            "duration": 2323,
            "slug": "fully-connected-neural-networks-with-keras",
            "lessons_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/lessons",
            "progress_url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras/progress",
            "user_rating": null,
            "url": "https://egghead.io/api/v1/series/fully-connected-neural-networks-with-keras",
            "http_url": "https://egghead.io/courses/fully-connected-neural-networks-with-keras",
            "path": "/courses/fully-connected-neural-networks-with-keras",
            "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/thumb/EGH_KerasNeural_Final.png",
            "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/full/EGH_KerasNeural_Final.png",
            "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/series/square_covers/000/000/226/landscape/EGH_KerasNeural_Final.png",
            "instructor": {
              "instructor_url": "https://egghead.io/api/v1/instructors/chris-achard",
              "id": 210,
              "slug": "chris-achard",
              "full_name": "Chris Achard",
              "first_name": "Chris",
              "last_name": "Achard",
              "twitter": "nanohopdev",
              "website": "http://www.nanohop.com",
              "bio": "",
              "bio_short": "I'm a web and mobile consultant focused on React, React Native, Ruby on Rails, Node.js, and machine learning!",
              "google_plus": "",
              "http_url": "https://egghead.io/instructors/chris-achard",
              "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/210/original/chris_500.jpg",
              "lessons_url": "https://egghead.io/api/v1/instructors/chris-achard/lessons",
              "published_lessons": 28,
              "published_courses": 1
            }
          },
          "video_processing_status": "completed",
          "media_urls": {
            "hls_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-continue-to-train-an-already-trained-keras-model-with-new-data-d9ccb1cc6a/scikit-learn-continue-to-train-an-already-trained-keras-model-with-new-data-d9ccb1cc6a.m3u8",
            "dash_url": "https://d2c5owlt6rorc3.cloudfront.net/scikit-learn-continue-to-train-an-already-trained-keras-model-with-new-data-d9ccb1cc6a/scikit-learn-continue-to-train-an-already-trained-keras-model-with-new-data-d9ccb1cc6a.mpd"
          }
        }
      ]
    }
  },
  "userIdentifier": "9aa73297eb2d07cc4f2fa0fb827539b0",
  "flash": []
}
